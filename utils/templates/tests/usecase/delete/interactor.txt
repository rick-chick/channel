from channel.usecase.interactor.{model_lower} import {model}DeleteInteractor
from channel.usecase.models import (
    {model}DeleteInDto,
    {model}DeleteInDsDto,
    {model}DeleteOutDsDto,
    UserSessionDsDto
)
from channel.usecase.output_port.{model_lower} import {model}DeleteOututPort
from channel.usecase.exception import BusinessException
from channel.usecase.repository.{model_lower} import {model}DeleteRepository

from tests.channel.factories import (
  {model}DeleteOutDsDtoFactory,
  {model}DeleteInDtoFactory,
  UserSessionDsDtoFactory
)

from typing import Optional, List

valid_{model_lower}_ds_dto = {model}DeleteOutDsDtoFactory.batch(3)

valid_{model_lower}_in_dto = {model}DeleteInDto(
    ids=[{model_lower}.id for {model_lower} in valid_{model_lower}_ds_dto]
)
valid_session_user_ds_dto = UserSessionDsDtoFactory.build()


class {model}DeleteOututPortImpl({model}DeleteOututPort):

    def __init__(self):
        self.exceptions = []
        self.{model_lower}_dto: Optional[List[int]] = None

    def prepare_fail_view(self, exception: Exception):
        self.exceptions.append(exception)

    def prepare_success_view(
        self,
        {model_lower}_dto: {model}{action}OutDto
    ) -> {model}{action}OutDto:
        self.{model_lower}_dto = {model_lower}_dto
        return {model_lower}_dto

class {model}DeleteRepositoryImpl({model}DeleteRepository):

    delete_input: Optional[{model}DeleteInDsDto] = None
    delete_output: List[{model}DeleteOutDsDto] = valid_{model_lower}_ds_dto
    load_session_user_output: Optional[UserSessionDsDto] = valid_session_user_ds_dto

    def delete(
        self,
        {model_lower}: {model}DeleteInDsDto
    ) -> List[{model}DeleteOutDsDto]:
        self.delete_input = {model_lower}
        return self.delete_output

    def load_session_user(self) -> Optional[UserSessionDsDto]:
        return self.load_session_user_output


def create_interactor(
        gateway={model}DeleteRepositoryImpl(),
        presenter={model}DeleteOututPortImpl()) -> {model}DeleteInteractor:
    return {model}DeleteInteractor(gateway, presenter)


def test_delete_success():

    presenter = {model}DeleteOututPortImpl()
    gateway = {model}DeleteRepositoryImpl()

    gateway.delete_output = valid_{model_lower}_ds_dto

    target = create_interactor(gateway, presenter)

    target.delete(valid_{model_lower}_in_dto)

    assert presenter.{model_lower}_dto is not None
    assert len(presenter.{model_lower}_dto.ids) == 3


def test_delete_fail():

    presenter = {model}DeleteOututPortImpl()
    gateway = {model}DeleteRepositoryImpl()

    gateway.load_session_user_output = None

    target = create_interactor(gateway, presenter)
    with pytests.raises(BusinessException):
        target.delete(valid_device_in_dto)
