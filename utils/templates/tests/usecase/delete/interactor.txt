from {model_lower}.usecase.interactor.{model_lower} import {model}{action}Interactor
from {model_lower}.usecase.models import (
    {model}{action}InDto,
    {model}{action}InDsDto,
    {model}{action}OutDsDto,
    {model}{action}OutDto,
    UserSessionDsDto
)
from {model_lower}.usecase.output_port.{model_lower} import {model}{action}OututPort
from {model_lower}.usecase.exception import BusinessException
from {model_lower}.usecase.repository.{model_lower} import {model}{action}Repository

from tests.{model_lower}.factories import (
    {model}{action}OutDsDtoFactory,
    {model}{action}InDtoFactory,
    UserSessionDsDtoFactory
)

from typing import Optional, List
import pytest

valid_{model_lower}_ds_dto = {model}{action}OutDsDtoFactory.batch(3)

valid_{model_lower}_in_dto = {model}{action}InDto(
    ids=[{model_lower}.id for {model_lower} in valid_{model_lower}_ds_dto]
)
valid_session_user_ds_dto = UserSessionDsDtoFactory.build()


class {model}{action}OututPortImpl({model}{action}OututPort):

    def __init__(self):
        self.exceptions = []

    def prepare_fail_view(self, exception: Exception):
        self.exceptions.append(exception)

    def prepare_success_view(
        self,
        {model_lower}_dto: {model}{action}OutDto
    ) -> {model}{action}OutDto:
        self.{model_lower}_dto = {model_lower}_dto
        return {model_lower}_dto


class {model}{action}RepositoryImpl({model}{action}Repository):

    {action_lower}_input: Optional[{model}{action}InDsDto] = None
    {action_lower}_output: List[{model}{action}OutDsDto] = valid_{model_lower}_ds_dto
    load_session_user_output: Optional[UserSessionDsDto] = valid_session_user_ds_dto

    def {action_lower}(
        self,
        {model_lower}_dto: {model}{action}InDsDto
    ) -> List[{model}{action}OutDsDto]:
        self.{action_lower}_input = {model_lower}_dto
        return self.{action_lower}_output

    def load_session_user(self) -> Optional[UserSessionDsDto]:
        return self.load_session_user_output


def create_interactor(
        gateway={model}{action}RepositoryImpl(),
        presenter={model}{action}OututPortImpl()) -> {model}{action}Interactor:
    return {model}{action}Interactor(gateway, presenter)


def test_{action_lower}_success():

    presenter = {model}{action}OututPortImpl()
    gateway = {model}{action}RepositoryImpl()

    gateway.{action_lower}_output = valid_{model_lower}_ds_dto

    target = create_interactor(gateway, presenter)

    target.{action_lower}(valid_{model_lower}_in_dto)

    assert presenter.{model_lower}_dto is not None
    assert len(presenter.{model_lower}_dto.ids) == 3


def test_{action_lower}_fail():

    presenter = {model}{action}OututPortImpl()
    gateway = {model}{action}RepositoryImpl()

    gateway.load_session_user_output = None

    target = create_interactor(gateway, presenter)
    with pytest.raises(BusinessException):
        target.{action_lower}(valid_{model_lower}_in_dto)
