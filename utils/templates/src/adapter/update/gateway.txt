from .{model_lower}_repository import {model}Repository
from {model_lower}.adapter.gateway.user import UserSession

from {model_lower}.usecase.models import (
    {model}GetOutDsDto,
    {model}{action}InDsDto,
    {model}{action}OutDsDto,
    UserSessionDsDto,
)
from {model_lower}.usecase.repository.{model_lower} import {model}{action}Repository

from typing import Optional


class {model}{action}Gateway({model}{action}Repository):

    def __init__(
            self,
            {model_lower}_repository: {model}Repository,
            user_session: UserSession):
        self.{model_lower}_repository = {model_lower}_repository
        self.user_session = user_session

    def {action_lower}(
        self,
        {model_lower}: {model}{action}InDsDto
    ) -> Optional[{model}{action}OutDsDto]:
        return self.{model_lower}_repository.{action_lower}({model_lower})

    def load_session_user(self) -> Optional[UserSessionDsDto]:
        return self.user_session.load()

    def find_{model_lower}_by_id(
        self,
        id: int
    ) -> Optional[{model}GetOutDsDto]:
        return self.{model_lower}_repository.find_by_id(id)
