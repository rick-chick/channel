from {model_lower}.usecase.input_port.{model_lower} import {model}{action}InputPort
from {model_lower}.usecase.repository.{model_lower} import {model}{action}Repository
from {model_lower}.usecase.models import (
    {model}{action}InDsDto
)
from {model_lower}.usecase.output_port.{model_lower} import {model}{action}OututPort

from {model_lower}.usecase.models import (
    {model}{action}InDto,
    {model}{action}OutDto
)
from {model_lower}.usecase.exception import (
    BusinessException,
    {model}NotFoundException,
    ValidationException,
    UnauthorizedException
)
from {model_lower}.entity.models import {model}

from pydantic import ValidationError


class {model}{action}Interactor({model}{action}InputPort):

    def __init__(
            self,
            gateway: {model}{action}Repository,
            presenter: {model}{action}OututPort):
        self.gateway = gateway
        self.presenter = presenter

    def {action_lower}(
            self, {model_lower}_dto: {model}{action}InDto) -> {model}{action}OutDto:

        try:

            # 現在の{model}の取得
            {model_lower}_ds_dto = self.gateway.find_{model_lower}_by_id({model_lower}_dto.id)
            if not {model_lower}_ds_dto:
                raise {model}NotFoundException

            # ユーザの確認
            session_user_ds_dto = self.gateway.load_session_user()
            if not session_user_ds_dto:
                raise UnauthorizedException

            # None以外のフィールドをマージする
            {model_lower} = {model}.model_validate({
                **{model_lower}_ds_dto.model_dump(),
                **{model_lower}_dto.model_dump(exclude_none=True)
            })

            # 更新
            {model_lower}_res_ds_dto = self.gateway.{action_lower}(
                {model}{action}InDsDto(
                    **{model_lower}.model_dump(),
                    {action_lower}d_by=session_user_ds_dto.id,
                )
            )
            if not {model_lower}_res_ds_dto:
                raise {model}NotFoundException

            # 出力データ構築
            {model_lower}_out_dto = {model}{action}OutDto(
                **{model_lower}_res_ds_dto.model_dump()
            )

            self.presenter.prepare_success_view({model_lower}_out_dto)

            return {model_lower}_out_dto

        except ValidationError as e:
            ex = ValidationException(e)
            self.presenter.prepare_fail_view(ex)
            raise ex

        except BusinessException as e:
            self.presenter.prepare_fail_view(e)
            raise e
