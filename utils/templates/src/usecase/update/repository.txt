from abc import ABC, abstractmethod
from {model_lower}.usecase.models import (
    {model}GetOutDsDto,
    {model}{action}InDsDto,
    {model}{action}OutDsDto,
    UserSessionDsDto,
)

from typing import Optional


class {model}{action}Repository(ABC):

    @abstractmethod
    def load_session_user(self) -> Optional[UserSessionDsDto]:
        pass

    @abstractmethod
    def find_{model_lower}_by_id(
        self,
        id: int
    ) -> Optional[{model}GetOutDsDto]:
        pass

    @abstractmethod
    def {action_lower}(
        self,
        {model_lower}: {model}{action}InDsDto
    ) -> Optional[{model}{action}OutDsDto]:
        pass
